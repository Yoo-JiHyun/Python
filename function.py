# 함수(function)
'''
코드의 반복을 줄이거나 어떠한 용도를 위해 특정 코드들을 모아둔 것
어떠한 결과를 만들어내는 코드의 집합
(재사용 할)코드의 묶음
필요할때 마다 호출해서 사용가능
'''
# 함수의 정의 방법

# 파라미터(Parameter) : 함수를 정의할때 입력받는 변수(매개변수)
# 아규먼트(Argument) : 함수를 호출하는 곳에서 함수에 넣어주는 값(인수)

# 변수의 사용 범위(Scope)
'''
지역 변수(local) : 함수 내부에서 만들어진 지역 변수는 함수 내에서만 사용이 가능하다 ( 함수 내에서 선언된 변수, 파라미터 )
전역 변수(global) : 함수 밖에서 만들어진 변수는 어디에서든 사용이 가능하다.
제어문은 해당이 안된다. 즉 제어문 code context 안에 변수는 글로벌한 변수다.
'''

# 아규먼트(Argument)를 넣는 방식

# positional argument
# 정의된 파라미터 위치에 맞게 넣는 방식

# keyword argument
# 정의된 파라미터명을 키워드로 하여 넣는 방식

# 파라미터(Parameter)를 정의하는 방식

# 디폴트 파라미터
# 아규먼트를 넣어주지 않을때 파라미터에 지정된 초깃값을 사용

# 잘못된 default parameter 설정
# default parameter 일반 파라미터 뒤에 넣어줘야합니다.

# 가변 파라미터
'''
함수를 정의하면서 Argument가 n개가 들어 갈 수 있다!(0개 포함)
*(asterisk) 를 이용한다.
일반적으로 *args 로 표현
함수내부에 튜플형태로 묶인다.
'''

# 키워드 가변 파라미터
'''
함수를 정의하면서 keyword Argument가 n개가 들어 갈 수 있다(0개 포함)
일반적으로 **kwargs 로 표현
함수내부에서 딕셔너리 형태로 묶인다
변수명이 Key로, 값이 value로 들어간다.
'''

# 람다 함수(lambda)
'''
한줄 짜리 간단한 함수를 만들 때 사용
1회용 함수를 만들 때 많이 사용
람다 함수는 아주 간단한 파라미터가 있고, 일반적으로 리턴이 있는 함수를 만들 때 사용 한다.
'''

# 클래스(Class)
'''
변수와 함수를 묶어 놓은 개념
클래스는 데이터(변수)와 기능(함수)을 갖고있는 객체를 만들기 위한 설계도
클래스를 메모리에 객체화 하면 그걸 인스턴스(instance)라고 한다.
'''
# 클래스의 구조
'''
변수: 인스턴스 변수(객체화 되면 참조가능한 변수), 클래스 변수(클래스 정의시에도 참조가능한 변수)
함수: method(객체의 소속되는 함수)
__init__ 메소드 : 생성자(Constructor)
객체의 변수의 값을 초기 세팅
객체가 처음 만들어 질 때 초기화해야할 변수들있다면 __init__ 메소드에 작성한다.
일반적으로 인스턴스 변수들 초기화할때 정의한다.
'''
# 클래스 정의 방법

# self
'''
클래스가 객체화 되었을때 자기 자신의 주소를 받는 파라미터
클래스가 인스턴스화 되면 메모리상에 어디에 위치해 있는지 self 안에 주소값을 참조하여 인스턴스에 접근하고 그안에 인스턴스 변수와 인스턴스 메소드에 접근해서 사용한다.
클래스를 정의할때 메소드에 무조건 첫번째 파라미터에 정의해줘야한다.
클래스의 메소드를 사용할때는 아규먼트로 넣어주지 않아도 자동으로 들어간다.
'''

# 모듈(Module), 패키지(Package)
'''
모듈 : 변수, 함수, 클래스를 모아놓은 .py 확장자 파일
    .py 파일 : 마크다운이나 셀 같은 정보는 없고, 순수한 파이썬 코드만 존재
    .ipynb 파일 : 데이터 분석가들이 파이썬 언어와 데이터로 작업하고 실험할수 있도록 도와주는 Interactive 한 계산 환경(Jupyter Notebook 환경에서 실행되는 파일)

패키지 : 모듈의 기능을 디렉토리(폴더) 별로 정리해 놓은 개념
모듈을 모아놓은 폴더
라이브러리라고 부르기도함.
엄밀히 말하면 라이브러리는 패키지의 집합으로 패키지보다 큰개념
패키지 생성: 디렉토리(폴더)를 만든 것과 비슷한 작업
'''

# random 모듈 이용한 모듈 사용하기